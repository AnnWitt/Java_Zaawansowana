Operacje I/O (pracuje na strumieniach ale danych, nie tym co wczesnij),
stream api<>stream - rozne pojecia
new I/O (korzysta z buforów, roboczy obszar, umozliwia np cofanie

java.io - wprowadza klasy odpowiadzialne za oeracje na strumienach
java.nio - na wejsciu.wyjsciu, bufofory

korzystjac z read/write blokujemy wykonanie programu (jak zawiera dzo to soiwania)
probl;em blokowania wątków, wielowątkowe już new

FIleInpSream in = new FIleInpSream("user.txt")
while ((c=in.read())!=-1 {
out.wrote(c);
}

nie zawsze nio lepsze, jak duzy plik to lepiej na io bo na nio robi sie ogromny bufor

przy pracy musza byc wyjatki (w io)
problemy braku pliku, problemu z zaczytem

try catch przydaje sie finally (gdy otworxylidmy in i jest <> null to go zamykamy
in.close
zużywamy coraz wiecej pamieci bez tego bo "lapiemy kolejne plik". Inny watek nie
moze sie dostac do tego pliku, strumienie trzebs zamykać po to finally. Bez wzgledu
na to czy znalezliusmy czy nie to musimy zrobic close

mozna try with resourcws aby zamykal z automaty  - implements Closable
(screen ze slacka porownanie.png) => dwa sposoby

https://java.pl.sdacademy.pro/_slides/java_zaawansowana/java_io.html#/

try {
in=new FileInputStream(uset.txt)
out=new FileOutputStream(user_output.txt)

} catch (FileNotFoundException s) {
e.printStackTrace();
} finally {
close.in
}

te pliki umieszczamy w resources
prawy myszy i patch
C:\Users\Anna_\IdeaProjects\JavaZaawansowana\src\main\resources\user.txt
resources/user.txt (z content)

maven/ lifecykle, clean i instal

//Reader - FileReader
/Writer - FileWriter

tu jest strumien znaków, to co bylo wczesniej to bylo do strumienia danych


   out = new FileWriter("C:\\Users\\Anna_" +
                    "\\IdeaProjects\\JavaZaawansowana\\src\\main\\resources" +
                    "\\user_output.txt");*/ //wtedy nadpisze
            out = new FileWriter("C:\\Users\\Anna_" +
                    "\\IdeaProjects\\JavaZaawansowana\\src\\main\\resources" +
                    "\\user_output.txt",true); //wtedy dopisze a nie nadpisze

                    --------------------------
                    buforowanie danych

////////////////////////////////////////////////// bufory i kanały
nio - clean/flip/rewind bufor
Channels - reprezentavcja twartego polaczenia np z zewn urzadzeniem np drukarka/portem
/innym komponentem
umozliwia jedna lub wiecej operacji,optymalizuje, zamyka

kanal moze zawierac bufor ale nie musi/ bezpieczne dla wielowątkowosci
kanal "zarzadza" buforem

nio - pozwala na wiele kanalow, przydzielone rozne wątku
https://java.pl.sdacademy.pro/_slides/java_zaawansowana/java_io.html#/8
//Path jest interfejsem,



//---------------------------
Serializacja i deserializacja

zamiana obiektu na dane /dane na obiekt
jak wywala notserializableexception to w klasie implements Serializable

/////////////////////////////
wspolbiezne (1 i 2 sie wymieniaja zasobami
rownolegle (1 watek i drugi razem w nim

proces sklada się z wątków
https://java.pl.sdacademy.pro/_slides/java_zaawansowana/programowanie_wspolbiezne_i_rownolegle.html#/
Thread watek wykonania w probramie (extends Thread)
dziedziczenie po Thread albo z interfejsu Runnable

public class HttpAction extends Thread {
    @Override
    public void run() {
        //Send http request
    }
}
class HttpClient {
    public static void main(String[] args) {
        HttpAction httpAction = new HttpAction();
        httpAction.start();//uruchomienie wątku
    }
}


wątek stany

wait czeka na akcje
sleep na okreslony czas


Thread.currentthread().getid()

moga sie ieszac watki i sobie wchodza a parade
nie da sie przewidziec, który kiedy przwejmie zasoby

w ramach jednego watku idzie po kolei ale jak ida 2,3 watki to moga
byc przemieszane

Thread t1=new Thread(new Runnable())
t1.start()

zatrzymanie atku - jest na to metoda stop ale nie powinnismy z nej korzystac
jest interrupt

synchronized - gdy kilka watkow dotykaja jednej zmiennej to tylko jedno wchodzi na raz
mpzna blok kopdu albo metodę
public synchronized void run()

zablkowanie fragmentu kodu dla watku, poki z nim nie skonczy.

blok kodu
synchronized(){
i tu kod, w nawiasie () na rzecz jakiego obiektu ma zapasc blokada (this) do calosci obiektu
this.pair - ta czesc
}
(swego rodzaju wyscig)
synchronizujemy niezbędne minumum
moze byc tak, że np samowyswietlenie wyswietla niepoprawne a wartosci sa poprawne
------------------------------------------------------------
deadlock blokada wątkw - zakleszczenie
jeden korzysta z zasobow drugie, a drugi z pierwszego

zaczekac na wątek - polecenie join (coordinating


threadA.join(ile milisekund - max czas czekania na watek)
jeżeli bezarg to czekamy az skonczy prace
(poczekaj na A tyle a tyle czasu)

.poll zabierz z kolejki element odpowiednik pull/get

wait wywolywana na rzecz obiektu
notify - wiecej watkow "waiting" na ten sam wątek,
poinformuje jednego losowego, notifyall powiadomi wszsytkich

w przykladzie customer jest rachunkiem bankowym

/////////////////////////////////////////////
Callable - generyczny interfejs funkcyjny
podobny do runable (sygnatura public void run() )
Callable moze cos zwracac np stringa bo Implements Callable<String>
public String call()throws Excepion - moze zwracac wartosc albo wyjatek
obydwa wykorzystujemy w wielowątkowosci (slajd 10)

Future - interfejs przyszly wynik dzialania metody asynchronicznej. Zostanie
zwrocony jak sie zakonczy przetwarzanie operacji - pobierana jako get.
podobnie troche jak join, czekamy aż wynik bedzie dostepny
troche odpowiednik predictacle ale zamiast boolena da wartosc
obietnica/mamy pewnosc, że tam cos trafi

EXECUTORSERVICE
interfejs upraszczajacy wykonywanie zadan w strybie asynchroonicznym. rozklada
zadania po wątkach
musza zostac recznie zamkniete albo beda trzymac watki
1)shutdown (void) - nie przyjmuje nowych a te co są sie zakoncza
2)shutdownnow - (lista runnabvle) nie przyjmuje nowych, usiluje zamknac istniejace
i daje listę tego co zatrzymalismy, co zostalo w kolejce

singleThreadssb.submit(()->sout)); (do runnable skieruje
singleThreadssb.submit(()->"sout")); (do rcallable

invokeany / invoke all

any - kaze zaczac zadania, zwraca pierwszy i ubija reszte.
Wyscig - 1 zwyciezca (ten szyvbszy)  a reszta kaput. tylko jeden task, ten pierwszy
reszta, cancelled

all -wykonuje zadania i zwraca liste future, wynik tych operacji

lista uzupełniona "posortowana" wg kolejnosci w kodzie


scheduler
schedy

sheduleAtFixedRate( co ma byc uruchomiana, (initial delay)pierwsze opozonienie, ile ma sie dodatkowo opoznic

np czynnosc trwa 5, 1 przerwa (ten delay) i kolejny

shedulewithfixeddelay
czeka 6 sekund od zakonczenia poprzedniego zadania


//Typy atomowe - atomic (pozwala uniknac wyscigu watkow)
util concuretn Atomic - ubsluguje operacje atomowe na pojedynczych zmiennych
nie ma problemu z wielowatkowoscia
 kolejnodc "wrzutu" / rozwiaze problem bez synchronized
 andandget - preinkrementacja
 getandadd - postinkrementacja

 VOLATILE
 umozliwa bezpieczenstwo zmiennych przy wielu watkach. Wartosc nie jest buforowana
 i jest zawsze odczytywany z pamieci glownej
 np cache moze miec inna wartosc niż w glownej pamieci programu
 Stworzy w main memory, które sa nie tylko dla wątki ale ma dostęp
 dla wszystkich
 int volatile wiek -> typ volatile (to nie jest atomowosc ale na pewno będzie
 zaaktualizowana dla wszystkich watkow ale nadal bedzie problem z dostepem
 jezeli wielowatkowo volatile AtomicINteger wiek
 AtomicInteger (odpornosc na wielowatkowosc)

