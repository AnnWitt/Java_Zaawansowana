
stream Api - zestaw metod z ktorych mozemy korzystac w ramach streamow

stream - umozliwiaja zrownoleglenie operacji, przyspieszenie przetwarzania danych,
Wielowatkowosc

stream <> I/O Streams -- zupelnie inne pojecia, podobne nazewnictwo przypadkowe

Załóżmy, że mamy listę obiektów typu Person i chcemy otrzymać listę zwierząt
należących to osób, które są starsze niż 35 lat. Zanim wprowadzono Javę 8,
rozwiązalibyśmy to w taki sposób
List<Pet> pets = new ArrayList<>();
for (Person p : people)  {
   if (p.getAge() > 35) {
pets.add(p.getPet());
   }
}
, a korzystając ze streamów w taki:
List<Pet> pets = people.stream()
   . filter((p) -> p.getAge() > 35) //predykat, dalej tylko te, które przeszly
   dla kazdego el p robimy sprawdzenie
   . map(x->x.getPet()) //map wymaga interfejsu funkcyjnego,mapa sie tym zajmie
   //x to ludzi zamienia ludzi na zwierzeta. sensowniej people zamiast x
   . collect(Collectors.toList()); //zapakowanie do kolekcji. Jezeli to pominiemy to
   dostarczymy stream zamiast listy. To zamiana na liste. Metoda kończąca operacje na
   streamach

zestaw patametrow do uzycia

collect(Collector <? super Object, A, R>collector) R
wyszczegolnione przypadki
Collector.toList //to przypadki tak naprawe Collector
Collector.toSet
itd

filter(Predicate<T>)- przyjmuje Predicate<T>
map(Function<T,R>) - przyjmuje Function<T,R>
collect( Collector<T,A,R>) przyjmuje Collector<T,A,R>


.map(Function<T,R>
.map używamy po to, by "mapować" obiekty, czyli
przekształcać jeden obiekt w inny.
List<String> letters = Arrays.asList("a", "b", "c", "d");
       List<String> collect = letters.stream().map(String::toUpperCase).
       collect(Collectors.toList());
       System.out.println(collect); //[A, B, C, D]


       streamy dużo trudniejsze do debugowania. Jeżeli wielowątkowe to lepiej na streamach.
       Czasami lepiej na iteracyjnych

.filter(Predicate<T>)
Jak sama nazwa wskazuje, filter() będziemy używać do
"filtrowania" naszego streama, czyli wybierania tylko
pożądanych elementów.
List<Person> persons = ...
Stream<Person> personsOver18 = persons.stream().filter(p -> p.getAge() > 18)
Stream typizowany na Person ale raczej tak sie nie robi

------------------------------
.flatMap - spłaszczanie streama streamow

Ta metoda używana jest do "spłaszczania" streama
streamów (to nie pomyłka).
 List<String> pinkFloyd = Arrays.asList("Gilmour", "Waters", "Wright","Mason","Barrett");
       List<String> ledZeppelin = Arrays.asList("Page", "Plant", "Jones","Bonham");
       List<List<String>> woodstockBands = new ArrayList<>();
       woodstockBands.add(pinkFloyd);
       woodstockBands.add(ledZeppelin);
       //... // - mozna dodac i milion i  zbiermay to i tak tym x-x.steeam
       List<String> lineUp = woodstockBands.stream()  //np wypis zamist dwócj petli
                                           .flatMap(x->x.stream())
                                           .collect(Collectors.toList());
                                           temat duplikatów zależny od XXX<String> - rtu
                                           dopusci duplikaty
W tym przykładzie "spłaszczyliśmy" listę list na jedną listę.
Wynikiem jest lista Stringów zawierająca wszystkie
Stringi z listy źródłowej

flatMap - w zasadzie łączy streamy
streama zamykamy kolekcjami albo np wyciagniecie jednego elementu np najwieksza wartosc
sumowanie, element najdluzszy, czy np wszystkie elelemnty sa stringami i zwracamy true/false


collect( Collector<T,A,R>)
Tej metody można użyć do "zebrania" streama w kolekcję,
która nas interesuje. Stream trzeba w jakiś sposób
zamknąć. Najszczęściej będziemy oczekiwać kolekcji, ale
mogą to być pojedyncze obiekty. Poniżej przykłady:
List<String> result = givenList.stream()
 .collect(toList());
Set<String> result = givenList.stream()
 .collect(Collectors.toSet());  //konstruktor spelnia warunki suppliera
List<String> result = givenList.stream()
 .collect(toCollection(LinkedList::new))
String result = givenList.stream()
 .collect(joining());
String result = givenList.stream()
 .collect(joining(" "));
Long result = givenList.stream()
 .collect(counting());

  .collect(Collectors.toCollection(LinkedList::new))
  Function.indentity // odpowiednik (student ) -> student

  https://java.pl.sdacademy.pro/e-podrecznik/java_zaawansowana/programowanie_funkcyjne/


  STREAM DWA SPOSOBY ZEJSCIA

          episodeList.stream()
                  .map(episodeZM -> episodeZM.getEpisodeName())
                  .forEach(System.out::println);

          System.out.println("metoda2 to samo");
          List.of(s1).stream()
                  .flatMap(mapper -> mapper
                          .episodes.stream()
                          .map(m2 -> m2.episodeName))
                  .forEach(System.out::println);
      }